services:

  # Postgres
  db:
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d Restaurante"]
      interval: 5s
      timeout: 5s
      retries: 5


  # MongoDB Shard Nodes
  mongors1n1:
    container_name: mongors1n1
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27017:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - data1:/data/db
    networks:
      - backend-network

  mongors1n2:
    container_name: mongors1n2
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27027:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - data2:/data/db
    networks:
      - backend-network

  mongors1n3:
    container_name: mongors1n3
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27037:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - data3:/data/db
    networks:
      - backend-network

  # Config Servers (Replica Set de 3 nodos)
  mongo-config1:
    image: mongo
    container_name: mongo-config1
    command: mongod --configsvr --replSet configReplSet --dbpath /data/configdb --port 27017
    networks:
      - backend-network
    volumes:
      - config-data1:/data/configdb

  mongo-config2:
    image: mongo
    container_name: mongo-config2
    command: mongod --configsvr --replSet configReplSet --dbpath /data/configdb --port 27017
    networks:
      - backend-network
    volumes:
      - config-data2:/data/configdb

  mongo-config3:
    image: mongo
    container_name: mongo-config3
    command: mongod --configsvr --replSet configReplSet --dbpath /data/configdb --port 27017
    networks:
      - backend-network
    volumes:
      - config-data3:/data/configdb

  # MongoDB Router
  mongos:
    image: mongo
    container_name: mongos
    command: mongos --configdb configReplSet/mongo-config1:27017,mongo-config2:27017,mongo-config3:27017 --bind_ip_all --port 27017
    ports:
      - "27018:27017"
    depends_on:
      - mongo-config1
      - mongo-config2
      - mongo-config3
      - mongors1n1
      - mongors1n2
      - mongors1n3
    networks:
      - backend-network

  # Redis
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ElasticSearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.28
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # Reduce memoria si es necesario
      - http.host=0.0.0.0  # Aceptar conexiones externas
      - transport.host=0.0.0.0
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - backend-network

  # Base de datos para Keycloak
  keycloak-db:
    image: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Servicio Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: start-dev
    #command: start-dev --import-realm
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
    volumes:
      - keycloak-data:/opt/keycloak/data
      #- ./keycloak-realm:/opt/keycloak/data/import
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - backend-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
      - search   
    networks:
      - backend-network

  # search:
  #   image: nginxdemos/hello
  #   ports:
  #     - "4000:80"
  #   networks:
  #     - backend-network

  # Servicio API
  api1:
    container_name: api1
    build:
      context: .
      dockerfile: src/api/Dockerfile
    env_file:
      - .env
    environment:
      INSTANCE_NAME: api1
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5001:5000"
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network

  api2:
    container_name: api2
    build:
      context: .
      dockerfile: src/api/Dockerfile
    env_file:
      - .env
    environment:
      INSTANCE_NAME: api2
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    ports:
      - "5002:5000"
    depends_on:
      - db
      - keycloak
      - redis
      - mongos
    networks:
      - backend-network

  search:
    build:
      context: .
      dockerfile: src/search/Dockerfile
    env_file:
      - .env
    environment:
      DB_USER: postgres
      DB_PASSWORD: mitzy
      DB_NAME: Restaurante
      DB_HOST: db
      DB_PORT: 5432
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: reserva-restaurantes
      KEYCLOAK_CLIENT_ID: api-restaurantes
      JWT_SECRET: your_jwt_secret
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5003:5003"
    networks:
      - backend-network

# Configuración de volúmenes
volumes:
  db-data:
  redis-data:
  mongo-data:
  keycloak-db-data:
  keycloak-data:
  data1:
  data2:
  data3:
  config-data1:
  config-data2:
  config-data3:
  es-data:

# Configuración de red
networks:
  backend-network:
    driver: bridge