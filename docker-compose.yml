services:

  # Postgres
  db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mitzy
      POSTGRES_DB: Restaurante
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    networks:
      - backend-network

  # MongoDB Shard Nodes
  mongors1n1:
    container_name: mongors1n1
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27017:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - data1:/data/db
    networks:
      - backend-network

  # Redis
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - backend-network

  mongors1n2:
    container_name: mongors1n2
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27027:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - data2:/data/db
    networks:
      - backend-network

  mongors1n3:
    container_name: mongors1n3
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27037:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - data3:/data/db
    networks:
      - backend-network

  # Config Servers (Replica Set de 3 nodos)
  mongo-config1:
    image: mongo
    container_name: mongo-config1
    command: mongod --configsvr --replSet configReplSet --dbpath /data/configdb --port 27017
    networks:
      - backend-network
    volumes:
      - config-data1:/data/configdb

  mongo-config2:
    image: mongo
    container_name: mongo-config2
    command: mongod --configsvr --replSet configReplSet --dbpath /data/configdb --port 27017
    networks:
      - backend-network
    volumes:
      - config-data2:/data/configdb

  mongo-config3:
    image: mongo
    container_name: mongo-config3
    command: mongod --configsvr --replSet configReplSet --dbpath /data/configdb --port 27017
    networks:
      - backend-network
    volumes:
      - config-data3:/data/configdb

  # MongoDB Router
  mongos:
    image: mongo
    container_name: mongos
    command: mongos --configdb configReplSet/mongo-config1:27017,mongo-config2:27017,mongo-config3:27017 --bind_ip_all --port 27017
    ports:
      - "27018:27017"
    depends_on:
      - mongo-config1
      - mongo-config2
      - mongo-config3
      - mongors1n1
      - mongors1n2
      - mongors1n3
    networks:
      - backend-network

# MongoDB Initialization
  # mongo-init:
  #   image: mongo:6.0
  #   container_name: mongo-init
  #   depends_on:
  #     - mongo-config1
  #     - mongo-config2
  #     - mongo-config3
  #     - mongors1n1
  #     - mongors1n2
  #     - mongors1n3
  #     - mongos
  #   volumes:
  #     - ./mongo-init/init-config.js:/init-config.js
  #     - ./mongo-init/init-shard.js:/init-shard.js
  #     - ./mongo-init/init-sharding.js:/init-sharding.js
  #   command: >
  #     bash -c "
  #       sleep 40 &&
  #       mongosh --host mongo-config1:27017 /init-config.js &&
  #       mongosh --host mongors1n1:27017 /init-shard.js &&
  #       mongosh --host mongos:27017 /init-sharding.js
  #     "
  #   networks:
  #     - backend-network

  # Base de datos para Keycloak
  keycloak-db:
    image: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Servicio Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - keycloak-data:/opt/keycloak/data
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - backend-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - search   
    networks:
      - backend-network

  search:
    image: nginxdemos/hello
    ports:
      - "4000:80"
    networks:
      - backend-network

  # Servicio API
  api:
    build: .
    env_file:
      - .env
    environment:
      DB_USER: postgres
      DB_PASSWORD: mitzy
      DB_NAME: Restaurante
      DB_HOST: db
      DB_PORT: 5432
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: reserva-restaurantes
      KEYCLOAK_CLIENT_ID: api-restaurantes
      JWT_SECRET: your_jwt_secret
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - db
      - keycloak
      - redis
      - mongos
    networks:
      - backend-network


# Configuración de volúmenes
volumes:
  db-data:
  redis-data:
  mongo-data:
  keycloak-db-data:
  keycloak-data:
  data1:
  data2:
  data3:
  config-data1:
  config-data2:
  config-data3:

# Configuración de red
networks:
  backend-network:
    driver: bridge